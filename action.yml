name: "PackBumpPR"
description: "Automatically bump package versions and create pull requests."
author: "HichemTab-tech"
branding:
  icon: "package"
  color: "green"

inputs:
  version_increment:
    description: "Version increment type (patch, minor, major, or custom)"
    required: true
    default: "patch"
  custom_version:
    description: "Custom version (only if version_increment is custom)"
    required: false
  github_token:
    description: "GitHub token for authentication"
    required: true
  main_branche:
    description: "Main branche name (for example: main)"
    required: true

outputs:
  pr_url:
    description: "URL of the created pull request"
    value: ${{ steps.create-pull-request.outputs.pr_url }}

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22.x'

    - name: Initialize Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
      shell: bash

    - name: Increment or Set Version
      run: |
        # Detect package manager based on lock files
        if [ -f "pnpm-lock.yaml" ]; then
          PACKAGE_MANAGER="pnpm"
          LOCK_FILE="pnpm-lock.yaml"
        elif [ -f "yarn.lock" ]; then
          PACKAGE_MANAGER="yarn"
          LOCK_FILE="yarn.lock"
        elif [ -f "package-lock.json" ]; then
          PACKAGE_MANAGER="npm"
          LOCK_FILE="package-lock.json"
        else
          PACKAGE_MANAGER="npm"
          LOCK_FILE="package-lock.json"
          echo "No lock file detected, defaulting to npm"
        fi
        
        echo "Detected package manager: $PACKAGE_MANAGER"
        echo "package_manager=$PACKAGE_MANAGER" >> $GITHUB_ENV
        echo "lock_file=$LOCK_FILE" >> $GITHUB_ENV

        CURRENT_VERSION=$(jq -r '.version' package.json)
        if [[ "${{ inputs.version_increment }}" == "custom" && -n "${{ inputs.custom_version }}" ]]; then
          NEW_VERSION="${{ inputs.custom_version }}"
        else
          # Use semver with the appropriate package manager
          case $PACKAGE_MANAGER in
            "pnpm")
              NEW_VERSION=$(pnpm exec semver $CURRENT_VERSION -i ${{ inputs.version_increment }})
              ;;
            "yarn")
              NEW_VERSION=$(yarn exec semver $CURRENT_VERSION -i ${{ inputs.version_increment }})
              ;;
            "npm"|*)
              NEW_VERSION=$(npx semver $CURRENT_VERSION -i ${{ inputs.version_increment }})
              ;;
          esac
        fi
        echo "new_version=$NEW_VERSION" >> $GITHUB_ENV

        git checkout -b version-bump-$NEW_VERSION

        # Update package.json
        jq ".version=\"$NEW_VERSION\"" package.json > temp.json && mv temp.json package.json
        
        # Update lock file if it exists
        if [ -f "$LOCK_FILE" ]; then
          case $PACKAGE_MANAGER in
            "npm")
              jq ".version=\"$NEW_VERSION\"" package-lock.json > temp-lock.json && mv temp-lock.json package-lock.json
              ;;
            "pnpm")
              # For pnpm, we need to update the lock file differently as it's YAML
              # We'll regenerate it by running pnpm install
              pnpm install --lockfile-only
              ;;
            "yarn")
              # For yarn, we need to update the lock file by running yarn install
              yarn install --mode update-lockfile
              ;;
          esac
        fi
      shell: bash

    - name: Commit Changes
      run: |
        # Add package.json and the detected lock file if it exists
        git add package.json
        if [ -f "${{ env.lock_file }}" ]; then
          git add "${{ env.lock_file }}"
        fi
        git commit -m "Bump version to ${{ env.new_version }} (using ${{ env.package_manager }})"
      shell: bash

    - name: Push Changes
      run: |
        git push -u origin version-bump-${{ env.new_version }}
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}

    - name: Create Pull Request
      run: |
        # Create appropriate PR body based on detected package manager
        if [ -f "${{ env.lock_file }}" ]; then
          LOCK_FILE_TEXT="and \`${{ env.lock_file }}\`"
        else
          LOCK_FILE_TEXT=""
        fi
        
        PR_RESPONSE=$(curl -X POST \
          -H "Authorization: Bearer ${{ inputs.github_token }}" \
          -H "Accept: application/vnd.github+json" \
          https://api.github.com/repos/${{ github.repository }}/pulls \
          -d @- <<EOF
        {
          "title": "Bump version to ${{ env.new_version }} (using ${{ env.package_manager }})",
          "body": "This PR updates the version to ${{ env.new_version }} in \`package.json\` ${LOCK_FILE_TEXT} using ${{ env.package_manager }} package manager.",
          "head": "version-bump-${{ env.new_version }}",
          "base": "${{ inputs.main_branche }}"
        }
        EOF
        )
        echo "pr_url=$(echo $PR_RESPONSE | jq -r '.html_url')" >> $GITHUB_OUTPUT
      shell: bash
